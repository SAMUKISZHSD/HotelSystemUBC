Um projeto de um sistema de reservas e gerenciamento de um hotel estilo CLI feito em java,maven,spring e banco de dados mysql via postgrees e arquitetura MVC aonde seja possivel fazer um login de um admin fixo que vai cadastrar as info de acesso de seus funcioarios (seja um CRUD de cadastro de funcionarios), apos isso o funcionario que foi cadastrado vai poder registrar os hospedes e fazer reservas, com isso, quero um crud de cadastro de hospedes, aonde tenha um crud de tipos de quartos a serem reservados e quartos reservados no nome do hospede que vai ficar no cadastro da reserva, quero que cada funcionalidade tenha um crud em si

deve ter um gerenciameto de hospedes, funcionarios, reservas, quartos de reservas e tipos de quartos todos devem ter um crud

primeiro faça a logica de um banco para esse sistema 
segundo faça esse sistema seguindo estilo CLI com todas as funcionalidades citadas acima, seguindo a logica do banco


gerenciamento-hotel/
├── src/
│   ├── main/
│   │   ├── java/
│   │   │   ├── hotel/
│   │   │   │   ├── example/
│   │   │   │   │   ├── controller/  # Aqui ficarão os controladores MVC
│   │   │   │   │   ├── model/       # Aqui ficarão as classes de modelo
│   │   │   │   │   ├── repository/  # Aqui ficarão os repositórios para acesso ao banco de dados
│   │   │   │   │   ├── service/     # Aqui ficarão os serviços
│   │   │   │   │   └── util/        # Aqui ficarão as classes utilitárias
│   │   │   │   │   └── Main.java    # Classe principal que inicia a aplicação
│   │   ├── resources/                # Aqui ficarão os arquivos de recursos, como arquivos de configuração
│   ├── test/                         # Aqui ficarão os testes unitários e de integração
├── pom.xml                           # Arquivo de configuração do Maven


Model: As classes de modelo ficarão no diretório model. Elas representam os dados e as regras de negócio do seu sistema.
View: Embora não haja um diretório específico para as views na estrutura que forneci (porque você mencionou que o projeto será um CLI, ou seja, a interface do usuário será o próprio console), a lógica de apresentação dos dados ao usuário ficaria normalmente em um diretório view.
Controller: Os controladores ficarão no diretório controller. Eles atuam como intermediários entre os modelos e as views, processando todas as solicitações de entrada e respondendo com saída.
Além disso, o diretório repository é onde você colocaria o código para interagir com o banco de dados (ou seja, criar, ler, atualizar e deletar registros). E o diretório service é onde você colocaria a lógica de negócio que coordena chamadas para vários modelos e/ou repositórios.
